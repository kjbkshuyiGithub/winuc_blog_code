// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户角色枚举
enum UserRole {
  ADMIN  @map("admin")
  AUTHOR @map("author")
  USER   @map("user")

  @@map("user_roles")
}

// 用户模型
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(USER)
  bio           String?   @db.Text
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // 关联
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]

  @@map("users")
}

// 角色枚举
enum Role {
  USER
  AUTHOR
  EDITOR
  ADMIN
}

// OAuth账户
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// 会话
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 验证令牌
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 验证码用途枚举
enum VerificationPurpose {
  REGISTER       @map("register")
  LOGIN          @map("login")
  RESET_PASSWORD @map("reset_password")

  @@map("verification_purpose")
}

// 验证码模型
model VerificationCode {
  id         String             @id @default(cuid())
  email      String
  code       String
  purpose    VerificationPurpose
  used       Boolean            @default(false)
  expiresAt  DateTime           @map("expires_at")
  verifiedAt DateTime?          @map("verified_at")
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @updatedAt @map("updated_at")

  @@index([email, purpose])
  @@index([email, code, purpose])
  @@map("verification_codes")
}

// 文章模型
model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String?   @db.Text
  content     String    @db.LongText
  published   Boolean   @default(false)
  coverImage  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  tags        Tag[]
  comments    Comment[]

  @@index([authorId])
  @@index([categoryId])
}

// 分类模型
model Category {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  posts Post[]
}

// 标签模型
model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  posts Post[]
}

// 评论模型
model Comment {
  id        String    @id @default(cuid())
  content   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies   Comment[] @relation("CommentToComment")

  @@index([authorId])
  @@index([postId])
  @@index([parentId])
}

// 网站设置
model SiteSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 访问统计
model PageView {
  id        String   @id @default(cuid())
  path      String
  userAgent String?
  ipAddress String?
  referer   String?
  createdAt DateTime @default(now())

  @@index([path])
  @@index([createdAt])
}

// 联系表单消息模型
model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contact_messages")
} 